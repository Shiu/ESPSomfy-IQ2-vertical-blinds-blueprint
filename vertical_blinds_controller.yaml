blueprint:
  name: ESPSomfy Vertical Blinds Controller (Percentage-Based)
  description: >
    Control system for ESPSomfy vertical blinds with automatic timing calculation.
    Only requires measuring ONE timing - the full travel time from open to closed.
    
    Send any percentage value (1-100) to move blinds to that position.
    Uses smart timing calculation with soft start compensation.
    
    Perfect for Benthin IQ2 motors with soft start/stop.
  
  domain: automation
  input:
    blind_entity:
      name: Blind Entity
      description: The ESPSomfy cover entity to control
      selector:
        entity:
          domain: cover
    
    blind_id:
      name: Blind ID
      description: >
        Unique identifier for this blind (e.g., "dining", "lounge", "bedroom").
        Used to target events to this specific blind.
      selector:
        text:
    
    position_tracker:
      name: Position Tracker Entity
      description: >
        Input number helper to track current position percentage.
        Create with min: 1, max: 100, step: 1
      selector:
        entity:
          domain: input_number
    
    # Single timing measurement - everything else is calculated!
    full_travel_time:
      name: Full Travel Time (ms)
      description: >
        Time it takes to go from fully open (position 3) to fully closed (position 1).
        This is the ONLY timing you need to measure!
      default: 30000
      selector:
        number:
          min: 5000
          max: 120000
          step: 100
          unit_of_measurement: "ms"
    
    soft_start_compensation:
      name: Soft Start Time (ms)
      description: >
        Time the motor spends in soft start phase (slow speed).
        Typically 2000-3000ms for Benthin IQ2 motors.
      default: 2500
      selector:
        number:
          min: 0
          max: 5000
          step: 100
          unit_of_measurement: "ms"
    
    soft_start_distance:
      name: Soft Start Distance (%)
      description: >
        Percentage of total distance covered during soft start.
        Start with 10-15% and adjust based on testing.
      default: 15
      selector:
        number:
          min: 5
          max: 30
          step: 1
          unit_of_measurement: "%"
    
    reset_buffer:
      name: Reset Buffer Time (ms)
      description: Extra time added when resetting to ensure fully open position
      default: 3000
      selector:
        number:
          min: 1000
          max: 10000
          step: 500
          unit_of_measurement: "ms"
    
    reset_first:
      name: Always Reset Position First
      description: >
        Always go to fully open position before moving to target.
        Enable this if timing drift is a problem.
      default: false
      selector:
        boolean:

trigger:
  - platform: event
    event_type: vertical_blinds_move

variables:
  blind_id: !input blind_id
  position_tracker: !input position_tracker
  current_position: "{{ states(position_tracker) | float }}"
  target_position: "{{ trigger.event.data.position | float }}"
  reset_first: !input reset_first
  reset_buffer: !input reset_buffer
  
  # Timing inputs
  full_travel: !input full_travel_time
  soft_comp: !input soft_start_compensation
  soft_distance: !input soft_start_distance
  
  # Calculate movement time dynamically based on positions
  # Motor has soft start (slow for 2-3 sec) then full speed, instant stop
  # Soft start is a fixed distance regardless of total movement
  calculate_time: >
    {% set distance = (target_position - current_position) | abs %}
    {% set distance_pct = distance / 99.0 %}
    {% if distance >= 99 %}
      {# Full travel - use exact measured time #}
      {{ full_travel | int }}
    {% else %}
      {# Soft start covers a fixed percentage of total distance #}
      {% set soft_start_distance_pct = (soft_distance | float) / 100.0 %}
      {% set full_speed_time = (full_travel | float) - (soft_comp | float) %}
      {% set full_speed_distance = 1.0 - soft_start_distance_pct %}
      {% set full_speed_rate = full_speed_distance / full_speed_time %}
      
      {% if distance_pct <= soft_start_distance_pct %}
        {# Very short movement - only in soft start range #}
        {{ ((soft_comp | float) * (distance_pct / soft_start_distance_pct)) | int }}
      {% else %}
        {# Soft start time + proportional full speed time #}
        {% set remaining_distance = distance_pct - soft_start_distance_pct %}
        {% set full_speed_portion = remaining_distance / full_speed_rate %}
        {{ ((soft_comp | float) + full_speed_portion) | int }}
      {% endif %}
    {% endif %}
  
  # Determine movement direction (100 = open, 1 = closed)
  movement_direction: >
    {% if target_position > current_position %}Up{% else %}Down{% endif %}

condition:
  - condition: template
    value_template: "{{ trigger.event.data.blind_id == blind_id }}"

action:
  # Optional: Reset to known position first (go to position 3 - fully open)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ reset_first }}"
        sequence:
          - choose:
              # Reset to fully open from any position
              - conditions:
                  - condition: template
                    value_template: "{{ current_position < 100 }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Up"
                  - delay:
                      milliseconds: >
                        {% set distance_pct = (100 - current_position) / 100.0 %}
                        {{ ((full_travel | float) * distance_pct + (soft_comp | float) + (reset_buffer | float)) | int }}
          
          - service: input_number.set_value
            data:
              entity_id: !input position_tracker
              value: 100
          - variables:
              current_position: 100
  
  # Main movement logic - simplified with dynamic calculation
  - condition: template
    value_template: "{{ current_position != target_position }}"
  
  # Movement needed - calculate and execute
  - service: espsomfy_rts.send_command
    data:
      entity_id: !input blind_entity
      command: "{{ movement_direction }}"
  - delay:
      milliseconds: "{{ calculate_time }}"
  - service: espsomfy_rts.send_command
    data:
      entity_id: !input blind_entity
      command: "My"
  
  # Update position tracker after movement
  - service: input_number.set_value
    data:
      entity_id: !input position_tracker
      value: "{{ target_position }}"

mode: single
max_exceeded: silent