blueprint:
  name: ESPSomfy Vertical Blinds Controller
  description: >
    Control system for ESPSomfy vertical blinds with precise timing.
    Creates a script that accepts position parameter when called.
    
    Call with: service: script.your_blind_name
    Data: position: 50 (or any value matching your configured positions)
    
    Works around ESPSomfy limitations by using direct motor commands with precise delays.
    Perfect for Benthin IQ2 motors with soft start/stop.
  
  domain: script
  input:
    blind_entity:
      name: Blind Entity
      description: The ESPSomfy cover entity to control
      selector:
        entity:
          domain: cover
    
    position_tracker:
      name: Position Tracker Entity
      description: >
        Input select helper to track current position.
        Create one with options matching your positions (e.g., "0", "33", "100").
      selector:
        entity:
          domain: input_select
    
    # Define your positions
    position_closed:
      name: Closed Position
      description: Position value for closed (usually 0 or 1 to avoid auto-rotation)
      default: 0
      selector:
        number:
          min: 0
          max: 10
          step: 1
          unit_of_measurement: "%"
    
    position_middle:
      name: Middle Position
      description: Your middle position (e.g., 33, 50, 66)
      default: 50
      selector:
        number:
          min: 20
          max: 80
          step: 1
          unit_of_measurement: "%"
    
    position_open:
      name: Open Position
      description: Position value for fully open (usually 100)
      default: 100
      selector:
        number:
          min: 90
          max: 100
          step: 1
          unit_of_measurement: "%"
    
    # Timing configurations
    time_open_to_close:
      name: Time - Open to Closed (ms)
      description: Time in milliseconds from fully open to closed
      default: 30000
      selector:
        number:
          min: 1000
          max: 60000
          step: 100
          unit_of_measurement: "ms"
    
    time_open_to_middle:
      name: Time - Open to Middle (ms)
      description: Time in milliseconds from fully open to middle position
      default: 15000
      selector:
        number:
          min: 1000
          max: 60000
          step: 100
          unit_of_measurement: "ms"
    
    time_middle_to_close:
      name: Time - Middle to Closed (ms)
      description: Time in milliseconds from middle position to closed
      default: 15000
      selector:
        number:
          min: 1000
          max: 60000
          step: 100
          unit_of_measurement: "ms"
    
    time_close_to_middle:
      name: Time - Closed to Middle (ms)
      description: Time in milliseconds from closed to middle position
      default: 15000
      selector:
        number:
          min: 1000
          max: 60000
          step: 100
          unit_of_measurement: "ms"
    
    time_full_open:
      name: Time - Full Open Reset (ms)
      description: Time to fully open from any position (used for position reset)
      default: 35000
      selector:
        number:
          min: 1000
          max: 60000
          step: 100
          unit_of_measurement: "ms"
    
    reset_first:
      name: Always Reset Position First
      description: >
        Always go to fully open position before moving to target.
        Enable this if timing drift is a problem.
      default: false
      selector:
        boolean:

fields:
  position:
    description: Target position (0, 33, 50, 100, etc.)
    example: 50
    selector:
      number:
        min: 0
        max: 100
        step: 1

variables:
  current_position: "{{ states(position_tracker) }}"
  target_position: "{{ position | int }}"
  pos_closed: !input position_closed
  pos_middle: !input position_middle
  pos_open: !input position_open
  reset_first: !input reset_first
  position_tracker: !input position_tracker

sequence:
  # Optional: Reset to known position first
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ reset_first and current_position | string != pos_open | string }}"
        sequence:
          - service: espsomfy_rts.send_command
            data:
              entity_id: !input blind_entity
              command: "Up"
          - delay:
              milliseconds: !input time_full_open
          - service: input_select.select_option
            data:
              entity_id: !input position_tracker
              option: "{{ pos_open }}"
          - variables:
              current_position: "{{ pos_open }}"
  
  # Main movement logic
  - choose:
      # Moving to OPEN position
      - conditions:
          - condition: template
            value_template: "{{ target_position == pos_open }}"
        sequence:
          - choose:
              # Already at open
              - conditions:
                  - condition: template
                    value_template: "{{ current_position | int == pos_open | int }}"
                sequence: []
              
              # From any other position - go fully open
            default:
                - service: espsomfy_rts.send_command
                  data:
                    entity_id: !input blind_entity
                    command: "Up"
                - delay:
                    milliseconds: !input time_full_open
          
          - service: input_select.select_option
            data:
              entity_id: !input position_tracker
              option: "{{ pos_open }}"
      
      # Moving to CLOSED position
      - conditions:
          - condition: template
            value_template: "{{ target_position == pos_closed }}"
        sequence:
          - choose:
              # From open to closed
              - conditions:
                  - condition: template
                    value_template: "{{ current_position | int == pos_open | int }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Down"
                  - delay:
                      milliseconds: !input time_open_to_close
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "My"
              
              # From middle to closed
              - conditions:
                  - condition: template
                    value_template: "{{ current_position | int == pos_middle | int }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Down"
                  - delay:
                      milliseconds: !input time_middle_to_close
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "My"
              
              # Already at closed
              - conditions:
                  - condition: template
                    value_template: "{{ current_position | int == pos_closed | int }}"
                sequence: []
          
          - service: input_select.select_option
            data:
              entity_id: !input position_tracker
              option: "{{ pos_closed }}"
      
      # Moving to MIDDLE position
      - conditions:
          - condition: template
            value_template: "{{ target_position == pos_middle }}"
        sequence:
          - choose:
              # From open to middle
              - conditions:
                  - condition: template
                    value_template: "{{ current_position | int == pos_open | int }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Down"
                  - delay:
                      milliseconds: !input time_open_to_middle
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "My"
              
              # From closed to middle
              - conditions:
                  - condition: template
                    value_template: "{{ current_position | int == pos_closed | int }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Up"
                  - delay:
                      milliseconds: !input time_close_to_middle
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "My"
              
              # Already at middle
              - conditions:
                  - condition: template
                    value_template: "{{ current_position | int == pos_middle | int }}"
                sequence: []
          
          - service: input_select.select_option
            data:
              entity_id: !input position_tracker
              option: "{{ pos_middle }}"

mode: parallel