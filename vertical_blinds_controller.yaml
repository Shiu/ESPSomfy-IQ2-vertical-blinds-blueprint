blueprint:
  name: ESPSomfy Vertical Blinds Controller (Smart Timing)
  description: >
    Control system for ESPSomfy vertical blinds with automatic timing calculation.
    Only requires measuring ONE timing - the full travel time from open to closed.
    
    Position 1 = Closed (or nearly closed)
    Position 2 = Middle position
    Position 3 = Fully open
    
    The blueprint automatically calculates all intermediate timings using the
    position percentages and soft start compensation.
    
    Perfect for Benthin IQ2 motors with soft start/stop.
  
  domain: automation
  input:
    blind_entity:
      name: Blind Entity
      description: The ESPSomfy cover entity to control
      selector:
        entity:
          domain: cover
    
    blind_id:
      name: Blind ID
      description: >
        Unique identifier for this blind (e.g., "dining", "lounge", "bedroom").
        Used to target events to this specific blind.
      selector:
        text:
    
    position_tracker:
      name: Position Tracker Entity
      description: >
        Input select helper to track current position.
        Create with options: "1", "2", "3"
      selector:
        entity:
          domain: input_select
    
    # Position definitions (what each position represents)
    position_1_percent:
      name: Position 1 - Closed (%)
      description: What percentage Position 1 represents (usually 0 or 1 to avoid auto-rotation)
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 1
          unit_of_measurement: "%"
    
    position_2_percent:
      name: Position 2 - Middle (%)
      description: What percentage Position 2 represents (e.g., 33, 50, 66)
      default: 50
      selector:
        number:
          min: 20
          max: 80
          step: 1
          unit_of_measurement: "%"
    
    position_3_percent:
      name: Position 3 - Open (%)
      description: What percentage Position 3 represents (usually 100)
      default: 100
      selector:
        number:
          min: 90
          max: 100
          step: 1
          unit_of_measurement: "%"
    
    # Single timing measurement - everything else is calculated!
    full_travel_time:
      name: Full Travel Time (ms)
      description: >
        Time it takes to go from fully open (position 3) to fully closed (position 1).
        This is the ONLY timing you need to measure!
      default: 30000
      selector:
        number:
          min: 5000
          max: 120000
          step: 100
          unit_of_measurement: "ms"
    
    soft_start_compensation:
      name: Soft Start Compensation (ms)
      description: >
        Extra time added to calculated movements to compensate for motor soft start/stop.
        Increase if blinds don't reach target positions.
      default: 1000
      selector:
        number:
          min: 0
          max: 5000
          step: 100
          unit_of_measurement: "ms"
    
    reset_buffer:
      name: Reset Buffer Time (ms)
      description: Extra time added when resetting to ensure fully open position
      default: 3000
      selector:
        number:
          min: 1000
          max: 10000
          step: 500
          unit_of_measurement: "ms"
    
    reset_first:
      name: Always Reset Position First
      description: >
        Always go to fully open position before moving to target.
        Enable this if timing drift is a problem.
      default: false
      selector:
        boolean:

trigger:
  - platform: event
    event_type: vertical_blinds_move

variables:
  blind_id: !input blind_id
  position_tracker: !input position_tracker
  current_position: "{{ states(position_tracker) }}"
  target_position: "{{ trigger.event.data.position | string }}"
  reset_first: !input reset_first
  reset_buffer: !input reset_buffer
  
  # Position percentages
  pos_1_pct: !input position_1_percent
  pos_2_pct: !input position_2_percent
  pos_3_pct: !input position_3_percent
  
  # Timing inputs
  full_travel: !input full_travel_time
  soft_comp: !input soft_start_compensation
  
  # Calculate movement time dynamically based on positions
  # Formula: time = (full_travel Ã— distance_percentage) + soft_compensation
  # distance_percentage = abs(target_position - current_position) / (pos_3 - pos_1)
  calculate_time: >
    {% set from_pos = current_position | int %}
    {% set to_pos = target_position | int %}
    {% set from_pct = pos_1_pct if from_pos == 1 else (pos_2_pct if from_pos == 2 else pos_3_pct) %}
    {% set to_pct = pos_1_pct if to_pos == 1 else (pos_2_pct if to_pos == 2 else pos_3_pct) %}
    {% set distance_pct = ((to_pct - from_pct) | abs) / (pos_3_pct - pos_1_pct) %}
    {% if distance_pct == 1.0 %}
      {{ full_travel | int }}
    {% else %}
      {{ ((full_travel | float) * distance_pct + (soft_comp | float)) | int }}
    {% endif %}
  
  # Determine movement direction
  movement_direction: >
    {% set from_pos = current_position | int %}
    {% set to_pos = target_position | int %}
    {% set from_pct = pos_1_pct if from_pos == 1 else (pos_2_pct if from_pos == 2 else pos_3_pct) %}
    {% set to_pct = pos_1_pct if to_pos == 1 else (pos_2_pct if to_pos == 2 else pos_3_pct) %}
    {% if to_pct > from_pct %}Up{% else %}Down{% endif %}

condition:
  - condition: template
    value_template: "{{ trigger.event.data.blind_id == blind_id }}"

action:
  # Optional: Reset to known position first (go to position 3 - fully open)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ reset_first }}"
        sequence:
          - choose:
              # From position 1 - use full time plus buffer
              - conditions:
                  - condition: template
                    value_template: "{{ current_position == '1' }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Up"
                  - delay:
                      milliseconds: "{{ (full_travel | int) + (reset_buffer | int) }}"
              
              # From position 2 - use calculated time to open plus buffer
              - conditions:
                  - condition: template
                    value_template: "{{ current_position == '2' }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Up"
                  - delay:
                      milliseconds: >
                        {% set dist_pct = (pos_3_pct - pos_2_pct) / (pos_3_pct - pos_1_pct) %}
                        {{ ((full_travel | float) * dist_pct + (soft_comp | float) + (reset_buffer | float)) | int }}
              
              # From position 3 - just use buffer to ensure fully open
              - conditions:
                  - condition: template
                    value_template: "{{ current_position == '3' }}"
                sequence:
                  - service: espsomfy_rts.send_command
                    data:
                      entity_id: !input blind_entity
                      command: "Up"
                  - delay:
                      milliseconds: "{{ reset_buffer | int }}"
          
          - service: input_select.select_option
            data:
              entity_id: !input position_tracker
              option: "3"
          - variables:
              current_position: "3"
  
  # Main movement logic - simplified with dynamic calculation
  - choose:
      # Already at target position - do nothing
      - conditions:
          - condition: template
            value_template: "{{ current_position == target_position }}"
        sequence: []
    
    # Movement needed - calculate and execute
    default:
      - service: espsomfy_rts.send_command
        data:
          entity_id: !input blind_entity
          command: "{{ movement_direction }}"
      - delay:
          milliseconds: "{{ calculate_time }}"
      - service: espsomfy_rts.send_command
        data:
          entity_id: !input blind_entity
          command: "My"
  
  # Update position tracker after movement
  - service: input_select.select_option
    data:
      entity_id: !input position_tracker
      option: "{{ target_position }}"

mode: single
max_exceeded: silent