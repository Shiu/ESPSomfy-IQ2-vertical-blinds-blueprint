# Event-Based Vertical Blinds Configuration
# Only ONE automation per blind is required!

input_select:
  # Dining room position tracker (33% middle)
  dining_blinds_position:
    name: Dining Blinds Position
    options:
      - "0"
      - "33"
      - "100"
    initial: "100"
  
  # Lounge position tracker (50% middle)
  lounge_blinds_position:
    name: Lounge Blinds Position
    options:
      - "0"
      - "50"
      - "100"
    initial: "100"

# Required helper script to fire events from dashboard buttons
# Dashboard buttons cannot directly fire events, so we need this script
script:
  move_vertical_blinds:
    alias: Move Vertical Blinds
    fields:
      blind_id:
        description: The blind identifier (e.g., dining, lounge)
      position:
        description: Target position (0-100)
    sequence:
      - event: vertical_blinds_move
        event_data:
          blind_id: "{{ blind_id }}"
          position: "{{ position }}"

# Example Dashboard Configuration
dashboard_example:
  type: vertical-stack
  cards:
    - type: markdown
      content: "## Vertical Blinds Control"
    
    # Dining Room Controls
    - type: markdown
      content: "### Dining Room"
    
    - type: horizontal-stack
      cards:
        - type: button
          name: Open
          icon: mdi:blinds-open
          tap_action:
            action: call-service
            service: script.move_vertical_blinds
            data:
              blind_id: dining
                position: 100
        
        - type: button
          name: 33%
          icon: mdi:blinds
          tap_action:
            action: call-service
            service: script.move_vertical_blinds
            data:
              blind_id: dining
                position: 33
        
        - type: button
          name: Close
          icon: mdi:blinds-closed
          tap_action:
            action: call-service
            service: script.move_vertical_blinds
            data:
              blind_id: dining
                position: 0
    
    # Lounge Controls
    - type: markdown
      content: "### Lounge"
    
    - type: horizontal-stack
      cards:
        - type: button
          name: Open
          icon: mdi:blinds-open
          tap_action:
            action: call-service
            service: script.move_vertical_blinds
            data:
              blind_id: lounge
                position: 100
        
        - type: button
          name: 50%
          icon: mdi:blinds
          tap_action:
            action: call-service
            service: script.move_vertical_blinds
            data:
              blind_id: lounge
                position: 50
        
        - type: button
          name: Close
          icon: mdi:blinds-closed
          tap_action:
            action: call-service
            service: script.move_vertical_blinds
            data:
              blind_id: lounge
                position: 0
    
    # Current Position Display
    - type: entities
      title: Current Positions
      entities:
        - entity: input_select.dining_blinds_position
          name: Dining Room
        - entity: input_select.lounge_blinds_position
          name: Lounge

# Automation Creation Guide:
#
# For each blind, create ONE automation using the blueprint:
#
# 1. Go to Settings → Automations & Scenes → Automations
# 2. Create Automation → Use Blueprint
# 3. Select "ESPSomfy Vertical Blinds Controller (Event-Based)"
# 4. Configure:
#    - Blind Entity: cover.dining_blinds
#    - Blind ID: dining (unique identifier)
#    - Position Tracker: input_select.dining_blinds_position
#    - Position Values: Closed=0, Middle=33, Open=100
#    - Timings: Your measured times in milliseconds
# 5. Save with a descriptive name like "Dining Blinds Controller"
#
# The automation will listen for events like:
#   event_type: vertical_blinds_move
#   event_data:
#     blind_id: dining
#     position: 33
#
# You can test from Developer Tools → Events:
# Event Type: vertical_blinds_move
# Event Data (YAML):
#   blind_id: dining
#   position: 50